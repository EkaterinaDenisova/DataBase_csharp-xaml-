<Window x:Class="WpfAppDataBase.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfAppDataBase"
        mc:Ignorable="d"
        Title="База данных" Height="450" Width="800" Icon="/cat.ico" >
    <Grid>
        <!-- author Денисова Екатерина
        
        Разделение Grid по горизонтали-->
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="75*"/>
            <ColumnDefinition Width="30*"/>
        </Grid.ColumnDefinitions>

        <!--Разделение Grid по вертикали -->
        <Grid.RowDefinitions>
            <RowDefinition Height="25"/>
            <RowDefinition Height="425*"/>
        </Grid.RowDefinitions>

        <!-- Градиент -->
        <Grid.Background>
            <!-- LinearGradientBrush - градиентная кисть, представляет плавный 
            переход от одного цвета к другому-->
            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                <LinearGradientBrush.GradientStops>
                    <!-- Для указания цвета и точек, от которых начинается переход, 
                    используется объект GradientStop. Его свойство Color указывает 
                    на цвет, а свойство Offset - на точку, с которой начинается переход.-->
                    <GradientStop Offset="0" Color="White"> </GradientStop>
                    <GradientStop Offset="1" Color="#FF00BEFF"></GradientStop>
                </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>
        </Grid.Background>

        <!-- Элемент StackPanel используется для распределения дочерних элементов
        по горизонтали или по вертикали (Orientation).
        Grid.Column и Grid.Row - в каком столбце и строке сетки располагается
        Alignment - выравнивание 
        Margin - расстояние между элементом и его дочерним элементов или одноранговыми узлами.-->
        <StackPanel Grid.Column="1" Grid.Row="1" Orientation="Vertical" 
                    HorizontalAlignment="Right" VerticalAlignment="Top" 
                    Margin="0,0,10,0" >
            
            <Label Content="Имя нарушителя" MinHeight="27" MinWidth="160" FontSize="14"/>
            
            <!-- x - пространство имён
            TextWrapping -  способ переноса текста в текстовом поле
            (по умолчанию NoWrap - не переносить по словам)
            TabIndex устанавливает порядок фокусировки на элементе,
            когда пользователь переходит между элементами управления с помощью ТАВ
            (по умолчанию  Int32.MaxValue)-->
            <TextBox x:Name="TextBox_name" TextWrapping="Wrap" 
                     Text="Иванов Владимир Александрович" MinHeight="20" MinWidth="160" 
                     Margin="0,0,0,-4" TabIndex="1"/>
            
            <Label x:Name="Label_name_error" Content="" Height="23" MinWidth="160" FontSize="10" Margin="0,0,0,-4"/>
            <Label Content="Номер автомобиля" Height="27" MinWidth="160" Margin="0,4,0,0" FontSize="14" />
            
            <TextBox x:Name="TextBox_car_number" TextWrapping="Wrap" 
                     Text="а457кр" MinHeight="20" MinWidth="160" 
                     Margin="0,0,0,-4" TabIndex="2"/>
            
            <Label x:Name="Label_car_number_error" Height="23" MinWidth="160" FontSize="10" Margin="0,0,0,-4"/>
            <Label Content="Номер квитанции" MinHeight="27" MinWidth="160" Margin="0,4,0,0" FontSize="14"/>
            
            <TextBox x:Name="TextBox_receipt_number" TextWrapping="Wrap" 
                     Text="24568" MinHeight="20" MinWidth="160" 
                     Margin="0,0,0,-4" TabIndex="3"/>
            
            <Label x:Name="Label_receipt_number_error" Height="23" MinWidth="160" FontSize="10" Margin="0,0,0,-4"/>
            <Label Content="Сумма оплаты" MinHeight="27" MinWidth="160" Margin="0,4,0,0" FontSize="14"/>
            
            <TextBox x:Name="TextBox_payment" TextWrapping="Wrap" 
                     Text="5000" MinHeight="20" MinWidth="160" 
                     Margin="0,0,0,-4" TabIndex="4"/>
            
            <Label x:Name="Label_payment_error" Height="23" MinWidth="160" FontSize="10" Margin="0,0,0,-4"/>
            
            <!-- HorizontalAlignment="Stretch" - Дочерние элементы растягиваются для заполнения 
            выделенного пространства макета родительского элемента
            Cursor="Hand" - при наведении на кнопку курсор по умолчанию заменяется на курсор-руку 
            ToolTip - всплывающая подсказка при наведении
            Click - обработчик события при нажатии на кнопку
            -->
            <Button x:Name="button_add_row" Content="Добавить строку" 
                    HorizontalAlignment="Stretch" Margin="0,10,0,10" MinWidth="150" MinHeight="30" 
                    Cursor="Hand" FontSize="14" ToolTip="Enter" Click="button_add_row_Click"/>
            
            <Button x:Name="button_delete_row" Content="Удалить строку" 
                    HorizontalAlignment="Stretch" Margin="0,0,0,-4" MinWidth="150" MinHeight="30" 
                    Cursor="Hand" FontSize="14" Click="button_delete_row_Click"/>
            
            <Label x:Name="Label_state_error" Height="23" MinWidth="160" FontSize="10" Margin="0,0,0,-4"/>

        </StackPanel>

        <!-- DataGrid - элемент управления, отображающий данные в настраиваемой сетке
        CanUserAddRows="False" -  пользователь не может добавлять новые строки в элемент управления DataGrid
        CanUserReorderColumns="False" - пользователь не может менять порядок столбцов
        
        -->
        <DataGrid x:Name="datagrid" Grid.Column="0" Grid.Row="1" MinHeight="400" MinWidth="300" 
                  Margin="10,0,10,10" CanUserAddRows="False" CanUserReorderColumns="False"  />

        <!-- Класс Menu позволяет организовывать элементы, связанные с командами и 
        обработчиками событий, в иерархическом порядке. Каждый элемент Menu 
        содержит коллекцию элементов MenuItem.-->
        
        <Menu Margin="0,0,0,0" Height="30" VerticalAlignment="Top" Background="White">



            <!-- Header - элемент, задающий подпись элементу управления.-->
            <MenuItem Header="Файл">
                
                <MenuItem x:Name="Load" Header="Открыть" ToolTip="Ctrl+O" Click="MenuItemLoad_Click"/>
                <MenuItem x:Name="Save" Header="Сохранить" ToolTip="Ctrl+S" Click="MenuItemSave_Click"/>
                <MenuItem x:Name="SaveAs" Header="Сохранить как..." ToolTip="Ctrl+Shift+S" Click="MenuItemSaveAs_Click" />
                <MenuItem x:Name="Exit" Header="Выход" ToolTip="Alt+F4" Click="MenuItemExit_Click"/>
            </MenuItem>

            <MenuItem Header="Справка" ToolTip="Ctrl+F1" Click="MenuItemHelp_Click">
                
            </MenuItem>
        </Menu>
        
        

    </Grid>

    <!-- Ресурс — это объект, который можно повторно использовать в разных местах в приложении.-->
    <Window.Resources>
        <ResourceDictionary>
            <!-- RoutedUICommand - команда, к которой можно сделать привязку-->
            <RoutedUICommand x:Key="Ctr1" Text="Another Text" />
            <RoutedUICommand x:Key="Ctr2" Text="Another Text" />
            <RoutedUICommand x:Key="Ctr3" Text="Another Text" />
            <RoutedUICommand x:Key="Ctr4" Text="Another Text" />
            <RoutedUICommand x:Key="Ctr5" Text="Another Text" />
            <RoutedUICommand x:Key="Ctr6" Text="Another Text" />
        </ResourceDictionary>
    </Window.Resources>

    <!-- InputBindings - представляет привязку между InputGesture (класс,
    описывающий жесты устройства ввода) и командой. 
    Этой командой потенциально является RoutedCommand.
    
    При нажатии определённой клавиши (сочетания клавиш), выполняется команда-->
    <Window.InputBindings>
        <KeyBinding Key="S" Modifiers="Ctrl" Command="{StaticResource Ctr1}" />
        <KeyBinding Key="O" Modifiers="Ctrl" Command="{StaticResource Ctr2}" />
        <KeyBinding Key="S" Modifiers="Shift+Control" Command="{StaticResource Ctr3}" />
        <KeyBinding Key="F4" Modifiers="Alt" Command="{StaticResource Ctr4}" />
        <KeyBinding Key="F1" Modifiers="Ctrl" Command="{StaticResource Ctr5}" />
        <KeyBinding Key="Return" Command="{StaticResource Ctr6}" />
    </Window.InputBindings>

    <!-- CommandBinding привязывает команду к обработчикам событий, которые реализуют команду. -->
    <Window.CommandBindings>
        <CommandBinding Command="{StaticResource Ctr1}" Executed="CommandBindingSave_Executed"/>
        <CommandBinding Command="{StaticResource Ctr2}" Executed="CommandBindingOpen_Executed"/>
        <CommandBinding Command="{StaticResource Ctr3}" Executed="CommandBindingSaveAs_Executed"/>
        <CommandBinding Command="{StaticResource Ctr4}" Executed="CommandBindingExit_Executed"/>
        <CommandBinding Command="{StaticResource Ctr5}" Executed="CommandBindingHelp_Executed"/>
        <CommandBinding Command="{StaticResource Ctr6}" Executed="CommandBindingAdd_Executed"/>
    </Window.CommandBindings>


    <!-- Методы Execute и CanExecute класса RoutedCommand не содержат логику приложения для команды, 
    но вызывают перенаправленные события, которые проходят и поднимаются по дереву элементов, 
    пока не обнаружат объект с CommandBinding. CommandBinding содержит обработчики для этих событий, 
    а также обработчики для выполнения команды.-->
    
</Window>
